<template>
  <div :ui-form="`@a type:select ${sz ? 'sz:' + sz : ''}`">
    <IFollowView ref="ifollow" tipBoxClass="ny-sm nx-no" tipBoxStyle="min-width: 100%">
      <slot>
        <Input v-bind="$props" :clearable="false" readonly v-model="state.value" :interacted="interacted">
          <template #suffix><i ui-form-select=""></i></template>
        </Input>
      </slot>
      <template #tips>
        <ul v-if="props.options?.length" ui-scroll=":y s" class="nx-sm lh-ml" style="min-width: 100%; max-height: 15em">
          <template v-for="(item, idx) of props.options" :key="idx">
            <li v-if="item.disable" class="ux-hover nx-sm r-ss o-ms">
              <label style="pointer-events: none" ui-form="@a type:checkbox :block">
                <input type="checkbox" :name="state.name" :checked="modelValue?.some((i: any) => `${i}` === `${item.value}`)" />
                <del class="ml-sm">{{ item.label || item }}</del>
              </label>
            </li>
            <li v-else class="ux-hover nx-sm r-ss" @click.stop="select(item.value)">
              <label style="pointer-events: none" ui-form="@a type:checkbox :block">
                <input type="checkbox" :name="state.name" :checked="modelValue?.some((i: any) => `${i}` === `${item.value}`)" />
                <span class="ml-sm">{{ item.label || item }}</span>
              </label>
            </li>
          </template>
        </ul>
        <div v-else class="w-full ny-ms" ui-flex="col cm" v-html="spare"></div>
        <ul class="nx-sm lh-ml" v-if="tools">
          <li class="my-ss"><div class="o-mm" ui-line="@a"></div></li>
          <li ui-flex="row xm">
            <div class="ux-hover nx-sm r-ss nowrap co-main" @click.stop="allselect()">
              <label style="pointer-events: none" ui-form="@a type:checkbox :block">
                <input type="checkbox" :name="state.name" :checked="state.all" />
                <span class="ml-sm">全选({{ props.options?.length || 0 }})</span>
              </label>
            </div>
            <div>
              <button v-show="state.has" class="co-risk" ui-btn="@a none s" @click="remove">清空</button>
            </div>
          </li>
        </ul>
      </template>
    </IFollowView>
  </div>
</template>

<script setup lang="ts">
  import { reactive, ref, computed, watch } from 'vue';
  import { Input } from '../form';
  import { IFollowView } from '../basic';
  const ifollow: any = ref(null);

  const emits = defineEmits(['update:modelValue']);
  const props: any = defineProps({
    // 用户是否交互
    interacted: {
      type: Boolean,
      default: false
    },
    theme: { type: String, default: '@a' },
    sz: { type: String, default: '' },
    co: { type: String, default: '' },
    block: { type: Boolean, default: true },
    // 提示文案
    tips: {
      type: String,
      default: ''
    },
    placeholder: {
      type: String,
      default: ''
    },
    modelValue: {
      type: Array as () => any[],
      default: () => []
    },
    options: {
      type: Array as () => any[],
      default: () => []
    },
    // 校验规则
    rules: {
      type: Array,
      default: () => []
    },
    // 是否是示校验图标
    verify: {
      type: Boolean,
      default: false
    },
    tools: {
      type: Boolean,
      default: true
    },
    spare: {
      type: String,
      default: '当前没有可选项'
    }
  });

  const state: any = reactive({
    name: computed(() => {
      return Array.from({ length: 8 }, () => String.fromCharCode(97 + Math.floor(Math.random() * 26))).join('');
    }),
    show: 0,
    value: '',
    all: computed(() => {
      return props.options?.every((item: any) => props.modelValue?.some((i: any) => `${i}` === `${item.value}`));
    }),
    has: computed(() => {
      return props.options?.some((item: any) => props.modelValue?.some((i: any) => `${i}` === `${item.value}`));
    })
  });

  // 监听外部数据
  watch(
    () => props.modelValue,
    (v: any = []) => {
      const selectd: any = props.options?.filter((item: any) => v?.some((i: any) => `${i}` === `${item.value}`))?.map((item: any) => item.label) || [];
      state.value = selectd.join(' Ι ') || '';
    },
    { deep: true, immediate: true }
  );

  // 更新
  const change = (item: any) => {
    emits('update:modelValue', item);
  };
  // 选中
  const select = (item: any) => {
    const s = [...props.modelValue];
    s?.indexOf(item) !== -1 ? s?.splice(s?.indexOf(item), 1) : s?.push(item);
    change(s);
  };
  // 全选
  const allselect = () => {
    const s = state.all ? [] : props.options?.map((item: any) => item.value);
    change(s);
  };
  // 清除
  const remove = () => {
    change([]);
    ifollow.value.cancel();
  };
</script>
